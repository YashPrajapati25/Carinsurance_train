# -*- coding: utf-8 -*-
"""carinsurance.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tQeTbRyz85gjvS-kOn7MaNrrCpXF3TMG

# Train Data
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
car_ins_train=pd.read_csv(r'carInsurance_train.csv')

car_ins_train.info()

car_ins_train.head()

car_ins_train.describe(include='all')

callstart=pd.to_datetime(car_ins_train['CallStart'])
callend=pd.to_datetime(car_ins_train['CallEnd'])
time=[]
time_diff=callend-callstart
for t in time_diff:
  time.append(t.total_seconds())

car_ins_train['CallDuration']=time
car_ins_train.head()

car_ins_train.Job.unique()

car_ins_train.Education.unique()

car_ins_train=car_ins_train.drop(labels=['CallStart','CallEnd','Outcome'],axis=1)

car_ins_train.Job.mode()

car_ins_train['Job'].fillna('management',inplace=True)
car_ins_train.info()

car_ins_train.groupby(['Job','Education']).size()

'''
def edu_filler():
  while car_ins_train['Education'].isnull().sum()>0:
    if car_ins_train['Job']=='management':
      car_ins_train['Education'].fillna('tertiary')
    else :
      car_ins_train['Education'].fillna('secondary')
'''

car_ins_train['Education'].fillna('secondary',inplace=True)

car_ins_train.info()

car_ins_train['Communication'].fillna('cellular',inplace=True)

car_ins_train.info()

car_ins_train.head()

bins= [0, 20, 40, 60, 80, 100]
labels=['0-20','20-40','40-60','60-80','80-100']
car_ins_train['AgeGroup'] =pd.cut(car_ins_train['Age'], bins=bins,labels=labels)

car_ins_train['AgeGroup'].value_counts()

car_ins_train.head()

"""# EDA"""

correlation_matrix = car_ins_train.corr().round(2)
fig, ax = plt.subplots(figsize=(10,10))
sns.heatmap(data=correlation_matrix, annot=True,ax=ax)

car_ins_train.columns

plt = car_ins_train.Education.value_counts().sort_index().plot(kind='bar')
plt.set_xlabel('Education')
plt.set_ylabel('No of People')

"""Most people have "Secondary" level Education."""

plt = car_ins_train[['Education', 'CarInsurance']].groupby('Education').mean().CarInsurance.plot(kind='bar')
plt.set_xlabel('Education')
plt.set_ylabel('CarInsurance')

"""People with Tertiary level education tend to buy car insurance more often.

Tertiary>Secondary>Primary
"""

plt = car_ins_train[['AgeGroup', 'Id']].groupby('AgeGroup').count().Id.plot(kind='bar')

"""Majority of the people are in the age group 20 to 40"""

sns.set(rc={'figure.figsize':(14,10)})
sns.scatterplot(x='CallDuration',y='NoOfContacts',hue='CarInsurance',data=car_ins_train)

"""Most people tend to buy car insurance of they listen to the call for more than 5 mins

Call duration which are less than 5 mins will still end up being customers not buying the insurance no matter how many times the customer is called.
"""

sns.barplot(x='Job',y='Age',hue='CarInsurance',data=car_ins_train)

"""A persons age or job doesnt affect the fact that they buy the car insurance

"""

sns.barplot(x='CarInsurance',y='PrevAttempts',data=car_ins_train)

"""People are more likely to buy the car insurance if the number of previous attempts is higher"""

sns.barplot(x='AgeGroup',y='Balance',data=car_ins_train)

"""People in the 60 to 80 Age group have to most balance

# Encoding
"""

car_ins_train.Job.unique()

car_ins_train.Marital.unique()

car_ins_train['Marital']=car_ins_train['Marital'].map({'single':0,'married':1,'divorced':2})
car_ins_train['Education']=car_ins_train['Education'].map({'primary':1,'secondary':2,'tertiary':3})
car_ins_train['Communication']=car_ins_train['Communication'].map({'telephone':0,'cellular':1})
car_ins_train['LastContactMonth']=car_ins_train['LastContactMonth'].map({'jan':1,'feb':2,'mar':3,'apr':4,'may':5,'jun':6,'jul':7,'aug':8,'sep':9,'oct':10,'nov':11,'dec':12})
car_ins_train['Job']=car_ins_train['Job'].map({'management':0,'blue-collar':1, 'student':2, 'technician':3, 'admin.':4,'services':5, 'self-employed':6, 'retired':7, 'housemaid':8,'entrepreneur':9, 'unemployed':10})
car_ins_train = car_ins_train.drop(columns='AgeGroup')

car_ins_train.Marital.unique()

x=round(car_ins_train['CallDuration']/60,2)
car_ins_train['CallDuration']=x
print(car_ins_train.head())
car_ins_train.shape

"""# Scaling"""

'''
from sklearn.preprocessing import RobustScaler
scaler=RobustScaler()
scaled_data_train=scaler.fit_transform(car_ins_train)
scaled_data_train
'''

"""# Logistic Regression of training data

shuffling the data to create a random dataset
"""

from sklearn.utils import shuffle
car_ins_train=shuffle(car_ins_train)
#car_ins_train.head()

"""creating the xtrain and ytrain where xtrain is the column without the carinsurnce (target column) whereas ytrain is just the target column"""

X_train = car_ins_train.drop(columns='CarInsurance')
Y_train = car_ins_train[['CarInsurance']]

X_train.shape

"""importing the necessary libraries for applying Linear regression"""

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split

"""creating the train test split"""

X_training, X_valid, Y_training, Y_valid = train_test_split(X_train, Y_train, test_size=0.2, random_state=100)

"""fitting the logistic regression algorithmn"""

logreg_clf = LogisticRegression()
logreg_clf.fit(X_training,Y_training)

"""obtain the prediction from the algorithmn"""

prediction=logreg_clf.predict(X_valid)

from sklearn.metrics import accuracy_score

"""obtain the accuracy of the model"""

y=accuracy_score(Y_valid,prediction)
y

"""the model is predicting the outcome at 75.37% accuracy"""

from sklearn.metrics import confusion_matrix
confusion=confusion_matrix(Y_valid,prediction,labels=[1,0])
print(confusion)

from sklearn.metrics import classification_report

report_logreg= classification_report(Y_valid, prediction)
print(report_logreg)

"""# KNN"""

from sklearn.neighbors import KNeighborsClassifier

"""importing the KNN library from sklearn"""

# Create KNN classifier
knn = KNeighborsClassifier(n_neighbors = 3)
# Fit the classifier to the data
knn.fit(X_train,Y_train)

#show first 5 model predictions on the test data
predict=knn.predict(X_valid)

"""We can see that the model predicted ‘not bought CarInsurance’ for the 1st,3rd,4th,5th customer in the test set and ‘Bought CarInurance’ for the 2nd patient."""

#check accuracy of our model on the test data
x=knn.score(X_valid, Y_valid)
x

from sklearn.metrics import confusion_matrix
confusion=confusion_matrix(Y_valid,predict,labels=[1,0])
print(confusion)

from sklearn.metrics import classification_report

report_knn= classification_report(Y_valid, predict)
print(report_knn)